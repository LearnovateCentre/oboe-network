// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id               String             @id @default(cuid())
  firstName        String
  lastName         String
  email            String             @unique
  onboardee        Boolean            @default(false)
  team             String
  role             String
  level            Level
  status           Status
  picture          String
  skills           EmployeeSkills[]
  interests        Interest[]         @relation("EmployeeInterests")
  groups           Group[]            @relation("EmployeeGroups")
  Employee         MatchingEmployee[] @relation("Employee")
  MatchingEmployee MatchingEmployee[] @relation("MatchingEmployee")
}

model EmployeeSkills {
  id         String    @id @default(cuid())
  rating     Int
  skill      Skill?    @relation(fields: [skillId], references: [id])
  employee   Employee? @relation(fields: [employeeId], references: [id])
  skillId    String?
  employeeId String?
}

model Skill {
  id        String           @id @default(cuid())
  name      String           @unique
  employees EmployeeSkills[]
}

model Interest {
  id        String     @id @default(cuid())
  name      String     @unique
  employees Employee[] @relation("EmployeeInterests")
  tags      Tag[]      @relation("InterestTags")
}

model Group {
  id        String     @id @default(cuid())
  name      String     @unique
  employees Employee[] @relation("EmployeeGroups")
  tags      Tag[]      @relation("GroupTags")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  interests Interest[] @relation("InterestTags")
  groups    Group[]    @relation("GroupTags")
}

model MatchingEmployee {
  id                 String   @id @default(cuid())
  score              Float
  employee           Employee @relation("Employee", fields: [employeeId], references: [id])
  matchingEmployee   Employee @relation("MatchingEmployee", fields: [matchingEmployeeId], references: [id])
  employeeId         String
  matchingEmployeeId String
}

enum Status {
  ACTIVE
  INACTIVE
  AWAY
  BUSY
}

enum Level {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}
