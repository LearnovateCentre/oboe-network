# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Lightsail

on:
  push:
    branches:
      - main

# Permission can be added at job level or workflow level    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        # run: |
          # aws configure set aws_access_key_id ${{ secrets.ACCESSKEY_AWS }}
          # aws configure set aws_secret_access_key ${{ secrets.SECRETKEY_AWS }}
          # aws configure set default.region us-east-2  # Replace with your region
          # aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 262288775997.dkr.ecr.us-east-2.amazonaws.com/oboe-network
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::262288775997:role/GitHubAction-AssumeRoleWithAction
          aws-region: eu-west-1
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

    ###
    ### call get-caller-identity just as a sanity check so that we can see that we've logged in successfully
    ###
      - name: Sts GetCallerIdentity
        run: aws sts get-caller-identity
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 15.3.0     
          check-lastest: false
          registry-url: https://registry.npmjs.org
      
      # docker login -u AWS -p $(aws ecr get-login-password) 262288775997.dkr.ecr.us-east-2.amazonaws.com/oboe-network
      - name: Build and push Docker image
        run: |
          docker build -t oboe-api ./server
          docker tag oboe-api 262288775997.dkr.ecr.eu-west-1.amazonaws.com/oboe-network/oboe-api
          docker push 262288775997.dkr.ecr.eu-west-1.amazonaws.com/oboe-network/oboe-api
          
      - name: Build and push Docker image
        run: |
          docker build -t oboe-client ./client
          docker tag oboe-client 262288775997.dkr.ecr.eu-west-1.amazonaws.com/oboe-network/oboe-client:latest
          docker push 262288775997.dkr.ecr.eu-west-1.amazonaws.com/oboe-network/oboe-client:latest

      - name: SSH into Lightsail instance
        uses: appleboy/ssh-action@master
        with:
          host: 54.72.253.225
          username: PabloAlvarez
          key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Docker image
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.LIGHTSAIL_INSTANCE_IP }} 'docker-compose pull && docker-compose up -d'
